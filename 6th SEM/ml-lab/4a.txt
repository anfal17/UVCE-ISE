import numpy as np

from numpy import random as rand

X= np.array(([2,9], [1,5], [3.6] ), dtype=float)

y np.array(([92], [86], [89]), dtype=float)

X / np.amax(X, axis=0)

y = y/ 100

def sigmoid (x):

  return 1 / (1 + пр.ехр(-х))

def sigmoid_grad (x):

  return x (1-x)

epoch = 1000

eta = 0.2

input_neurons = len(X[0])

hidden_neurons = 3

output_neurons = len(y[0])

wh = rand.uniform(size (input_neurons, hidden_neurons))

bh = rand.uniform(size = (1, hidden_neurons))

wout = rand.uniform(size (hidden_neurons, output_neurons))

bout = rand.uniform(size = (1, output_neurons))

for in range (epoch):

#Forward propagation

  h_ip = np.dot(X, wh) + bh

  h_act = sigmoid(h_ip)

  o_ip = np.dot(h_act, wout) +
  
bout

  o_act = sigmoid(o_ip)

#Backward propagation

  e_o = y -o act

  out_grad sigmoid_grad(o_act)

 bd_output e_o * out_grad

  e_hd_output.dot(wout.T)

  hidden_grad sigmoid_grad(h_act)

  d_hiddene_h hidden_grad

  wout += h_act.T.dot(d_output) * eta

  wh += X.T.dot(d_hidden) * eta

print("Normalised Input", X, sep='\n')

print()

print("Actual Output", y, sep='\n')

print()

print("Predicted Output", o_act, sep='\n')
